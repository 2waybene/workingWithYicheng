source("C:/Users/li11/Documents/R-project/customPackages/arraySeqTools.R")
source("x:/R-project/customPackages/arraySeqTools.R")
source("https://bioconductor.org/biocLite.R")
biocLite("ctc")
source("x:/R-project/customPackages/arraySeqTools.R")
?readarray()
readarray
phyper(4,1000,1000,80)
import os, sys
import os
import OS
?mvrnorm
28792-7
28785/4.8
library(earth)
data(etitanic)
head(model.matrix(survived ~ ., data = etitanic))
dummies <- dummyVars(survived ~ ., data = etitanic)
data(mdrr)
data.frame(table(mdrrDescr$nR11))
str(iris)
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "ellipse",
## Add a key at the top
auto.key = list(columns = 3))
transparentTheme(trans = .9)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
library(mlbench)
data(BostonHousing)
regVar <- c("age", "lstat", "tax")
str(BostonHousing[, regVar])
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = BostonHousing[, regVar],
y = BostonHousing$medv,
plot = "scatter",
layout = c(3, 1))
featurePlot(x = BostonHousing[, regVar],
y = BostonHousing$medv,
plot = "scatter",
type = c("p", "smooth"),
span = .5,
layout = c(3, 1))
library(Hmisc)
weighted.stats <- function(name, weights)
{
mean <- wtd.mean(d$MID.POINT, weights)
sd   <- sqrt(wtd.var(d$MID.POINT, weights))
N    <- sum(weights)
return( list(mean=mean,sd=sd, N=N) )
}
plot.normal.curve <- function(x, y, line.color)
{
stats <- weighted.stats("1", y)
y.norm <- sum(y) * mean(diff(d$MID.POINT)) * dnorm(x, stats$mean, stats$sd)
lines(x, y.norm,
lty="dotted", col=line.color)
cat(stats$mean, stats$sd, stats$N, "\n")
y.norm
}
d <- read.table("http://research.stowers-institute.org/efg/R/Statistics/MixturesOfDistributions/HemingLakePike.dat",
header=TRUE)
# efg, 22 Aug 2006
# Data adapted from http://www.math.mcmaster.ca/peter/mix/demex/expike.html
# integrate(P, -1, 1, mean=0, sd=1) = integrate(dnorm, -1, 1, mean=0, sd=1)
P <- function(x, mean, sd)
{
variance <- sd^2
exp(-(x-mean)^2/(2*variance)) / sqrt(2*pi*variance)
}
# Find "peaks" in array.
# R equivalent of Splus peaks() function.
# http://finzi.psych.upenn.edu/R/Rhelp02a/archive/33097.html
# (see efg's posting to R-Help on 8 Feb 2007 about problem with ties.)
#
# peaks(c(1,4,4,1,6,1,5,1,1),3)
# [1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE
peaks <- function(series,span=3)
{
z <- embed(series, span)
s <- span%/%2
v <- max.col(z, "first") == 1 + s   # take first if a tie
result <- c(rep(FALSE,s),v)
result <- result[1:(length(result)-s)]
result
}
# First derivative.  Adjust x values to be center of interval.
# Spacing of x-points need not be uniform
Deriv1 <- function(x,y)
{
y.prime <- diff(y) / diff(x)
x.prime <- x[-length(x)] + diff(x)/2
list(x = x.prime,
y = y.prime)
}
# "Centered" 2nd-derivative. Spacing of x-points assumed to be uniform.
Deriv2 <- function(x,y)
{
h <- x[2] - x[1]
Range <- 2:(length(x)-1)  # Drop first and last points
list(x = x[Range],
y = (y[Range+1] - 2*y[Range] + y[Range-1]) / h^2)
}
library(lattice)
dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5))
, lines = rep(c("a", "b"), each = 100))
densityplot(~dens,data=dat,groups = lines,
plot.points = FALSE, ref = TRUE,
auto.key = list(space = "right"))
windows <- "X:/"
root <- windows
##	simulated data and density plot
library(lattice)
dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5))
, lines = rep(c("a", "b"), each = 100))
densityplot(~dens,data=dat,groups = lines,
plot.points = FALSE , ref = TRUE ,
main = "Two populations in 1:1 ratio",
xlab = "X vaules"
)
leg = c("A population", "B population")
legend ("topright", leg,  col = c("blue", "red"), lty = 1)
library(Rlab)
##==================================================================================
source (paste (root, "myGit/mixturemodel/Scripts/cleaningFuncs.R", sep = ""))
source (paste (root, "myGit/mixturemodel/Scripts/simDt_functions.R", sep = ""))
source (paste (root, "myGit/mixturemodel/Scripts/reconstrDtFunctions.R", sep = ""))
parameters <- para4()
##  normal sample
dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/Normal/", sep="")
lab <- "n"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
normal.temp <- reconed[,-1]
dim(t(normal.temp))[1]
label <- rep("n", dim(t(normal.temp))[1])
normal.out <- cbind(t(as.data.frame(normal.temp)), as.data.frame(label))
dim(normal.out)
reconstruct <- function (files, params)
{
dt.return <- ""
for (k in 1:length(files))
{
load(paste(dt.dir, files[k], sep=""))
popNum = 3
if (cleanedSample$AneuLeft == "" || length(cleanedSample$AneuLeft) == 0)
{
popNum = 2
}
if (cleanedSample$SP_count == "")
{
popNum = 1
}
#Make it 8 if greater than 8
if (popNum == 3)
{
cleanedSample$AneuLeft[which(cleanedSample$AneuLeft > 8)] <- 8
}
#if (is.na(cleanedSample$SP_count1))
if (cleanedSample$SP_count >=5)
{
ratio <- cleanedSample$FP_count/cleanedSample$SP_count
}else{
ratio <- params$oneSampleRatio[1]/params$oneSampleRatio[2]
}
w.norm <- ratio/(1+ratio)
w.mito <- 1/(1+ratio)
x <- seq(0,2.3, by=(2.3/512))
x <- x[-1]
if (popNum == 3)
{
y1 <- w.norm*P(x, cleanedSample$FP_mean, cleanedSample$FP_std)
y2 <- w.mito*P(x, cleanedSample$SP_mean, cleanedSample$SP_std)
y = y1 + y2
}else if (popNum ==2)
{
if (is.na(cleanedSample$SP_mean))
{
cleanedSample$SP_std = params$fakeSP_std
cleanedSample$SP_mean = params$fakeSP_mean
}else if (is.na(cleanedSample$SP_std))
{
cleanedSample$SP_std = params$fakeSP_std
}
y1 <- (w.norm*P(x, cleanedSample$FP_mean, cleanedSample$FP_std))*params$twoSampleRatio[1]
y2 <- (w.mito*P(x, cleanedSample$SP_mean, cleanedSample$SP_std))*params$twoSampleRatio[1]
y3 <- P(x, params$fake_aneu_mean, params$fake_aneu_std)*params$twoSampleRatio[2]
y = y1 + y2 + y3
}
prob.y <- c()
pdf.y <- y/sum(y)
prob.y[1] <- pdf.y[1]
#Gettig the empirical cdf, very important here!!
for (i in 2:length(y))
{
temp.prob <- pdf.y[i]
prob.y[i] <- prob.y[i-1] + temp.prob
}
if (popNum == 3)
{
numOfAneu <- length(cleanedSample$AneuLeft)
num2Recontr <- 9*numOfAneu
}else{
num2Recontr <- 1000
}
simDt <- c()
seed = 12345
for (i in 1:num2Recontr)
{
x1 <- runif(1, 0, 1)
index <- which(prob.y < (x1 + 0.002) & prob.y > (x1 - 0.002))
if (length(index) < 1)
{
index <- which(prob.y < (x1 + 0.02) & prob.y > (x1 - 0.02))
}
if (length(index) < 1)
{
index <- which(prob.y < (x1 + 0.2) & prob.y > (x1 - 0.2))
}
temp <- sample( index, 1)
simDt[i] <- x[temp]
}
if (popNum == 3)
{
simDt <- c(simDt , cleanedSample$AneuLeft)
}
bk = floor(max(simDt))*2
den <- (hist(simDt, breaks=bk)$density)
for (m in length(den):16)
{
den[m] <- params$filler
}
dt.temp <- as.data.frame(den)
colnames(dt.temp) <- cleanedSample$sample
dt.return <- cbind(dt.return, dt.temp)
}
return (dt.return)
}
dt.dir
#dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/Normal/", sep="")
## This is for phase II
dt.dir <- paste (root, "myGit/workingWithYicheng/phase-I-data/cleanedData/Normal/", sep="")
lab <- "n"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
normal.temp <- reconed[,-1]
dim(t(normal.temp))[1]
label <- rep("n", dim(t(normal.temp))[1])
normal.out <- cbind(t(as.data.frame(normal.temp)), as.data.frame(label))
dim(normal.out)
#dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/Normal/", sep="")
## This is for phase II
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/Normal/", sep="")
lab <- "n"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
normal.temp <- reconed[,-1]
dim(t(normal.temp))[1]
label <- rep("n", dim(t(normal.temp))[1])
normal.out <- cbind(t(as.data.frame(normal.temp)), as.data.frame(label))
dim(normal.out)
files
dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/OSCC/", sep="")
lab <- "c"
files <- list.files (path = dt.dir, pattern=".rda")
files
reconed <- reconstruct(files, parameters)
oscc.temp <- reconed[,-1]
dim(t(oscc.temp))[1]
label <- rep(lab, dim(t(oscc.temp))[1])
oscc.out <- cbind(t(oscc.temp), as.data.frame(label))
dim(oscc.out)
head(oscc.out)
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/OLK/", sep="")
lab <- "k"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
olk.temp <- reconed[,-1]
dim(t(olk.temp))[1]
label <- rep(lab, dim(t(olk.temp))[1])
olk.out <- cbind(t(olk.temp), as.data.frame(label))
dim(olk.out)
## This is for phase II
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/OSCC/", sep="")
lab <- "c"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
oscc.temp <- reconed[,-1]
dim(t(oscc.temp))[1]
label <- rep(lab, dim(t(oscc.temp))[1])
oscc.out <- cbind(t(oscc.temp), as.data.frame(label))
dim(oscc.out)
setwd(paste (root, "/mmyGit/workingWithYicheng/phase-I-data/reconData/", sep="")) #Newly tested Feb 5th, 2016
root
setwd(paste (root, "/myGit/workingWithYicheng/phase-I-data/reconData/", sep="")) #Newly tested Feb 5th, 2016
getwd()
combined.recon <- rbind (oscc.out, olk.out, normal.out)
str(combined.recon)
rownames(combined.recon)
colnames(combined.recon)
write.table (combined.recon, "recon_3classes_para4.txt", sep="\t", col.names = NA)
##  normal sample
#dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/Normal/", sep="")
## This is for phase II
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/Normal/", sep="")
lab <- "n"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
normal.temp <- reconed[,-1]
dim(t(normal.temp))[1]
label <- rep("n", dim(t(normal.temp))[1])
normal.out <- cbind(t(as.data.frame(normal.temp)), as.data.frame(label))
dim(normal.out)
##====================
##  olk sample
##====================
#dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/OLK/", sep="")
## This is for phase II
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/OLK/", sep="")
lab <- "k"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
olk.temp <- reconed[,-1]
dim(t(olk.temp))[1]
label <- rep(lab, dim(t(olk.temp))[1])
olk.out <- cbind(t(olk.temp), as.data.frame(label))
dim(olk.out)
##====================
##  oscc sample
##====================
#dt.dir <- paste (root, "/myGit/mixturemodel/cleanedData/OSCC/", sep="")
## This is for phase II
dt.dir <- paste (root, "/myGit/workingWithYicheng/phase-I-data/cleanedData/OSCC/", sep="")
lab <- "c"
files <- list.files (path = dt.dir, pattern=".rda")
reconed <- reconstruct(files, parameters)
oscc.temp <- reconed[,-1]
dim(t(oscc.temp))[1]
label <- rep(lab, dim(t(oscc.temp))[1])
oscc.out <- cbind(t(oscc.temp), as.data.frame(label))
dim(oscc.out)
#setwd(paste (root, "/myGit/mixturemodel/reconData/para2/", sep=""))
#setwd(paste (root, "/myGit/mixturemodel/reconData/para3/", sep="")) #Newly tested May 9th, 2014
setwd(paste (root, "/myGit/workingWithYicheng/phase-I-data/reconData/", sep="")) #Newly tested Feb 5th, 2016
getwd()
combined.recon <- rbind (oscc.out, olk.out, normal.out)
str(combined.recon)
rownames(combined.recon)
colnames(combined.recon)
write.table (combined.recon, "recon_3classes_para4.txt", sep="\t", col.names = NA)
